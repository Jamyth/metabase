import fs from "fs";
import path from "path";
import { createConsoleLogger } from "@iamyth/logger";
import { PrettierUtil } from "@iamyth/devtool-utils";
import type { Definition } from "@metamatter/core";

export interface DefinitionGeneratorOptions {
    definitionPath: string;
}

export class DefinitionGenerator {
    private readonly definitionPath: string;
    private readonly logger = createConsoleLogger("DefinitionGenerator");

    constructor(options: DefinitionGeneratorOptions) {
        this.definitionPath = options.definitionPath;
    }

    generate(definitions: Definition[]) {
        try {
            this.checkPrecondition();
            this.generateTypeFile(definitions);
            this.formatFile();
        } catch (error) {
            if (error instanceof Error) {
                this.logger.error(error);
            } else {
                console.error(error);
            }
            process.exit(1);
        }
    }

    private checkPrecondition() {
        this.logger.task("checking preconditions...");
        this.checkDirectoryExist();
    }

    private checkDirectoryExist() {
        const directoryPath = path.dirname(this.definitionPath);
        try {
            if (!fs.statSync(directoryPath).isDirectory()) {
                throw new Error("Not a valid directory");
            }
        } catch (error) {
            throw new Error(`"${path.relative(".", directoryPath)}" is not a valid directory`);
        }
    }

    private generateTypeFile(definitions: Definition[]) {
        this.logger.task("generating type definition file...");
        const content = definitions.reduce((rawContent, definition) => {
            const { type, name, definition: body } = definition;

            const codeBlock = `export ${type} ${name} ${body}`;

            return rawContent + codeBlock + "\n\n";
        }, "// This is generated by @metamatter/client, please do not modify.\n\n");

        fs.writeFileSync(this.definitionPath, content, { encoding: "utf-8" });
    }

    private formatFile() {
        this.logger.task("formatting file");
        PrettierUtil.format(this.definitionPath);
    }
}
