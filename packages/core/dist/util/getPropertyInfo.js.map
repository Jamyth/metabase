{"version":3,"file":"getPropertyInfo.js","sourceRoot":"","sources":["../../src/util/getPropertyInfo.ts"],"names":[],"mappings":";;;AAAA,6CAA4C;AAC5C,mDAAsD;AAYtD,SAAgB,eAAe,CAC3B,MAA0B,EAC1B,EAA0E;QAAxE,OAAO,aAAA,EAAE,MAAM,YAAA,EAAE,UAAU,gBAAA,EAAE,UAAU,gBAAA,EAAE,IAAI,UAAA,EAAE,MAAM,YAAA;IAEvD,IAAM,OAAO,GAAG,IAAI,yBAAW,EAAE,CAAC;IAClC,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;IAC5B,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;IAClC,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IAC1B,OAAO,CAAC,aAAa,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IAE1C,IAAI,MAAM,KAAK,IAAI,EAAE;QACjB,QAAQ,MAAM,EAAE;YACZ,KAAK,MAAM,CAAC;YACZ,KAAK,MAAM,CAAC;YACZ,KAAK,OAAO;gBACR,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;gBAC3C,MAAM;YACV,KAAK,IAAI;gBACL,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAC3B,MAAM;YACV,OAAO,CAAC,CAAC;gBACL,IAAM,WAAW,GAAmC,IAAI;oBACpD,CAAC,CAAC,IAAI;oBACN,CAAC;wBAEC,OAAO,CAAC,WAAW,CAAC,uBAAY,EAAE,MAAM,CAAC,CAAC;gBAChD,OAAO,CAAC,OAAO,CAAC,WAAW,IAAI,IAAI,CAAC,CAAC;gBACrC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBAC7B,MAAM;aACT;SACJ;KACJ;SAAM;QACH,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;KAC3B;IAED,OAAO,OAAO,CAAC,KAAK,EAAE,CAAC;AAC3B,CAAC;AApCD,0CAoCC","sourcesContent":["import { TypeBuilder } from './TypeBuilder';\nimport { PROPERTY_KEY } from '../decorators/Property';\nimport type { Constructor, EnumType, Type } from '../type';\n\ninterface PropertyInfo<T extends EnumType<T>> {\n    isArray: boolean;\n    isEnum: boolean;\n    isNullable: boolean;\n    isSubclass: boolean;\n    prefix: string | null;\n    body: T | null;\n}\n\nexport function getPropertyInfo<T extends EnumType<T>>(\n    object: Constructor | null,\n    { isArray, isEnum, isNullable, isSubclass, body, prefix }: PropertyInfo<T>,\n) {\n    const builder = new TypeBuilder();\n    builder.setIsArray(isArray);\n    builder.setIsNullable(isNullable);\n    builder.setIsEnum(isEnum);\n    builder.setIsSubclass(isSubclass, prefix);\n\n    if (object !== null) {\n        switch (object) {\n            case String:\n            case Number:\n            case Boolean:\n                builder.setType(object.name.toLowerCase());\n                break;\n            case Date:\n                builder.setType(Date.name);\n                break;\n            default: {\n                const propertyMap: { [P in keyof T]: Type<T[P]> } = body\n                    ? body\n                    : // TODO\n                      // Find out why use `object` instead of `object.constructor`\n                      Reflect.getMetadata(PROPERTY_KEY, object);\n                builder.setBody(propertyMap || null);\n                builder.setType(object.name);\n                break;\n            }\n        }\n    } else {\n        builder.setType('void');\n    }\n\n    return builder.build();\n}\n"]}