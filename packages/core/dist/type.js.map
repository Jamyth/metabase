{"version":3,"file":"type.js","sourceRoot":"","sources":["../src/type.ts"],"names":[],"mappings":"","sourcesContent":["type ExcludeArray<T> = T extends (infer U)[] ? U : T;\n\nexport type Constructor<T = any> = new (...args: any[]) => T;\nexport type EnumType<T> = { [P in keyof T]: T[P] & string };\nexport interface Type<T> {\n    type: string;\n    isPrimitive: boolean;\n    isArray: boolean;\n    isEnum: boolean;\n    isNullable: boolean;\n    isSubclass: boolean;\n    prefix: string | null;\n    body: T extends object ? (object extends T ? T : { [P in keyof T]: Type<ExcludeArray<T[P]>> }) : null;\n    toString: () => string;\n    toDefinition: () => string;\n}\n\nexport type PropertyTree<T> = Type<T>['body'];\nexport interface Definition {\n    name: string;\n    type: 'interface' | 'enum';\n    definition: string;\n}\n"]}