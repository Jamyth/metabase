{"version":3,"file":"Subclass.js","sourceRoot":"","sources":["../../src/decorators/Subclass.ts"],"names":[],"mappings":";;;AAAA,+DAA8D;AAEjD,QAAA,YAAY,GAAG,IAAA,qCAAiB,EAAC,UAAU,CAAC,CAAC;AA4B1D,SAAgB,QAAQ;IACpB,OAAO,UAAC,MAAM;QACV,OAAO,CAAC,cAAc,CAAC,oBAAY,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;IACvD,CAAC,CAAC;AACN,CAAC;AAJD,4BAIC","sourcesContent":["import { createMetadataKey } from '../util/createMetadataKey';\n\nexport const SUBCLASS_KEY = createMetadataKey('SUBCLASS');\n\n/**\n * attention:\n * This decorator helps the generator understand the current class is a subclass,\n * and it will automatically append '$' in between two classes to create a suitable interface\n *\n * @output\n * ```ts\n * OuterClass.InnerClass -> OuterClass$InnerClass\n * ```\n * @example\n * \\@Subclass()\n * class InnerClass {\n *     \\@Property()\n *     fieldA: string;\n *\n *     \\@Property()\n *     fieldB: string;\n * }\n *\n * class OuterClass {\n *     static InnerClass = InnerClass\n *\n *     \\@Property({ type: OuterClass.Inner })\n *     inner: InstanceType<typeof OuterClass.Inner>\n * }\n */\nexport function Subclass(): ClassDecorator {\n    return (target) => {\n        Reflect.defineMetadata(SUBCLASS_KEY, true, target);\n    };\n}\n"]}