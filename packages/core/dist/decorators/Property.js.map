{"version":3,"file":"Property.js","sourceRoot":"","sources":["../../src/decorators/Property.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,+DAA8D;AAC9D,2DAA0D;AAC1D,+BAAkC;AAClC,uCAA0C;AAG7B,QAAA,YAAY,GAAG,IAAA,qCAAiB,EAAC,UAAU,CAAC,CAAC;AAQ1D,IAAM,cAAc,GAAmB;IACnC,QAAQ,EAAE,KAAK;IACf,OAAO,EAAE,KAAK;CACjB,CAAC;AAuBF,SAAgB,QAAQ,CAA8B,EAIpB;QAJoB,qBAIlC,cAAc,KAAA,EAH9B,IAAI,UAAA,EACJ,eAAe,EAAf,OAAO,mBAAG,KAAK,KAAA,EACf,gBAAgB,EAAhB,QAAQ,mBAAG,KAAK,KAAA;IAEhB,OAAO,UAAC,MAAM,EAAE,GAAG;QACf,IAAM,aAAa,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;QAElC,IAAM,WAAW,GAA8B,OAAO,CAAC,WAAW,CAAC,oBAAY,EAAE,MAAM,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;QAE3G,IAAM,YAAY,GAAgB,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,aAAa,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC;QAEhG,IAAI,OAAO,YAAY,KAAK,SAAS,EAAE;YACnC,OAAO,CAAC,IAAI,CAAC,kBAAW,aAAa,4DAAuD,CAAC,CAAC;SACjG;QAED,IAAM,MAAM,GAAG,OAAO,CAAC,WAAW,CAAC,eAAQ,EAAE,YAAY,CAAC,IAAI,KAAK,CAAC;QACpE,IAAM,UAAU,GAAG,OAAO,CAAC,WAAW,CAAC,uBAAY,EAAE,YAAY,CAAC,IAAI,KAAK,CAAC;QAC5E,IAAI,IAAI,GAAgB,IAAI,CAAC;QAE7B,IAAI,MAAM,EAAE;YACR,IAAI,GAAG,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,MAAM,CACtC,UAAC,GAAG,EAAE,EAA8B;;oBAA9B,KAAA,aAA8B,EAA7B,GAAG,QAAA,EAAE,KAAK,QAAA;gBAAwB,OAAA,MAAM,CAAC,MAAM,CAAC,GAAG,YAAI,GAAC,GAAG,IAAG,KAAK,MAAG;YAApC,CAAoC,EAC7E,EAAU,CACb,CAAC;SACL;QAED,WAAW,CAAC,aAAa,CAAC,GAAG,IAAA,iCAAe,EAAC,YAAY,EAAE;YACvD,OAAO,SAAA;YACP,UAAU,YAAA;YACV,UAAU,EAAE,QAAQ;YACpB,MAAM,QAAA;YACN,IAAI,MAAA;YACJ,MAAM,EAAE,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI;SACtD,CAAC,CAAC;QAEH,OAAO,CAAC,cAAc,CAAC,oBAAY,EAAE,WAAW,EAAE,MAAM,CAAC,WAAW,CAAC,CAAC;IAC1E,CAAC,CAAC;AACN,CAAC;AAtCD,4BAsCC","sourcesContent":["import { createMetadataKey } from '../util/createMetadataKey';\nimport { getPropertyInfo } from '../util/getPropertyInfo';\nimport { ENUM_KEY } from './Enum';\nimport { SUBCLASS_KEY } from './Subclass';\nimport type { Constructor, EnumType, Type } from '../type';\n\nexport const PROPERTY_KEY = createMetadataKey('PROPERTY');\n\nexport interface PropertyOption {\n    nullable?: boolean;\n    isArray?: boolean;\n    type?: Constructor;\n}\n\nconst defaultOptions: PropertyOption = {\n    nullable: false,\n    isArray: false,\n};\n\n/**\n * attention:\n * This decorator used to define the type of currently property while generating client-side types\n * `Enum`, `Promise`, `Array` should explicitly provide in `options` parameter\n *\n * Nullable should consider `empty` instead of `null`\n *\n * @param {PropertyOption} options -- Provide external information of current property\n *\n * @example\n * class UserView {\n *     \\@Property()\n *     name: string;\n *\n *     \\@Property()\n *     age: number\n *\n *     \\@Property({ nullable: true })\n *     phone?: string\n * }\n */\nexport function Property<Enum extends EnumType<Enum>>({\n    type,\n    isArray = false,\n    nullable = false,\n}: PropertyOption = defaultOptions): PropertyDecorator {\n    return (target, key) => {\n        const serializedKey = String(key);\n\n        const propertyMap: Record<string, Type<any>> = Reflect.getMetadata(PROPERTY_KEY, target.constructor) || {};\n\n        const inferredType: Constructor = type ? type : Reflect.getMetadata('design:type', target, key);\n\n        if (typeof inferredType === undefined) {\n            console.warn(`Type of ${serializedKey} is inferred as \"undefined\", make sure it is correct.`);\n        }\n\n        const isEnum = Reflect.getMetadata(ENUM_KEY, inferredType) || false;\n        const isSubclass = Reflect.getMetadata(SUBCLASS_KEY, inferredType) || false;\n        let body: Enum | null = null;\n\n        if (isEnum) {\n            body = Object.entries(inferredType).reduce(\n                (acc, [key, value]: [string, string]) => Object.assign(acc, { [key]: value }),\n                {} as Enum,\n            );\n        }\n\n        propertyMap[serializedKey] = getPropertyInfo(inferredType, {\n            isArray,\n            isSubclass,\n            isNullable: nullable,\n            isEnum,\n            body,\n            prefix: isSubclass ? target.constructor.name : null,\n        });\n\n        Reflect.defineMetadata(PROPERTY_KEY, propertyMap, target.constructor);\n    };\n}\n"]}